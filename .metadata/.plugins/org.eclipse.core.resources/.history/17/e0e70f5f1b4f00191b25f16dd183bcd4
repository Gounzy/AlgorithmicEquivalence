% pdt_reload:pdt_reload('C:/DocumentsUnamur/GitHub/AlgorithmicEquivalence/src/main.pl').
   
% working_directory(_, 'C:/Users/User/ownCloud/GitHub/AlgorithmicEquivalence/src').
% working_directory(_, 'C:/DocumentsUnamur/GitHub/AlgorithmicEquivalence/src').

:-module(main,[]).

:-use_module(utils). 
:-use_module(input). 
:-use_module(pprint).  
:-use_module(db).

:- dynamic linked/2. 

prepare(File1, File2, OutClauses1, OutClauses2):-
	working_directory(CWD, CWD), 
 	sub_string(CWD, _, _, _ , 'clp'),
 	!, 
	db:init,
	input:load_file(File1, Clauses1), 
	input:load_file(File2, Clauses2), 
	mix_clauses(Clauses1, OutClauses1),
	mix_clauses(Clauses2, OutClauses2).

prepare(File1, File2, OutClauses1, OutClauses2):-
 	working_directory(CWD, CWD), 
 	concat(CWD, '/clp', NCWD), 
 	working_directory(CWD, NCWD), 
	db:init,
	input:load_file(File1, Clauses1),
	input:load_file(File2, Clauses2),
	mix_clauses(Clauses1, OutClauses1),
	mix_clauses(Clauses2, OutClauses2). 

compare_generalizations:- 
	compare_generalizations_loop(10).
	
compare_generalizations_loop(0). 
compare_generalizations_loop(N):- 
	N1 is N - 1, 
	compare_generalizations_loop(N1),    
	db:generate_clp_atoms(UAtoms1, UAtoms2), 
	sort(UAtoms1, Atoms1), 
	sort(UAtoms2, Atoms2), 
	
	format('~n~n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'),  
	format('~n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'), 
	format('~n*-*-*-***ROUND N°~w***-*-*-*-*', [N]), 
	format('~n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'), 
	format('~n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'),
	
	atoms_vars(Atoms1, Vars), 
	length(Vars, V1), 
	length(Atoms1, L1), 
	length(Atoms2, L2), 
	K is V1 + L1,
	generalize_for_all_k_up_to(K, Atoms1, Atoms2, 0), 
	
	format('~n~n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'),
	format('~nAtomes de la clause 1 : '), 
	pprint:print_list(Atoms1),
	format('~nAtomes de la clause 2 : '), 
	pprint:print_list(Atoms2), 
	format("~nNombre d'atomes: ~w/~w", [L1,L2]), 
	build_matrices(Atoms1, Atoms2, Matrix, Atoms2, 0, 0),
	format('~nMatrice de similarité: ~w', [Matrix]),
	time(mcg(Matrix, Mcg)), 
	get_mappings(Mcg, MMCG), 
	variable_to_numeric_mapping(MMCG, MMCGNUM),
	gen(MMCGNUM, Atoms1, Atoms2, MAXGEN),
	format('~nMCG : ~w avec renaming ~w', [MAXGEN, MMCG]),
	generalize_variables(10, Atoms1, Atoms2, [], [], Sol, Rho),
	format('~nMCG (variables) : ~w avec renaming ~w', [Sol, Rho]).
	
variable_to_numeric_mapping([], []).  
variable_to_numeric_mapping(['$VAR'(I)-'$VAR'(J)|Vars], [I-J|Nums]):- 
	variable_to_numeric_mapping(Vars, Nums). 
	
generalize_for_all_k_up_to(MaxK, Atoms1, Atoms2, CurrentK):-
	build_matrices(Atoms1, Atoms2, Matrix, Atoms2, 0, 0),
	generalize_for_all_k_up_to(MaxK, Atoms1, Atoms2, Matrix, CurrentK). 
	
generalize_for_all_k_up_to(MaxK, _, _, _, CurrentK):-
	CurrentK > MaxK.
generalize_for_all_k_up_to(MaxK, Atoms1, Atoms2, Matrix, CurrentK):-
	CurrentK =< MaxK,
	format('~n*-*-*-*-*-*-*-*-*** K = ~w ***-*-*-*-*-*-*', [CurrentK]),
	time(generalize_poly(CurrentK, Atoms1, Atoms2, Matrix,  _)),
	K1 is CurrentK + 1, 
	generalize_for_all_k_up_to(MaxK, Atoms1, Atoms2, Matrix, K1). 
 
test_matrix:-
	Atoms1 = [f('$VAR'(0)), f('$VAR'(1)), f('$VAR'(3)), g('$VAR'(0),'$VAR'(2)), g('$VAR'(1),'$VAR'(0)), g('$VAR'(2),'$VAR'(3)), g('$VAR'(3),'$VAR'(1)), g('$VAR'(3),'$VAR'(2)), i('$VAR'(0),'$VAR'(3)), i('$VAR'(1),'$VAR'(1)), h('$VAR'(0),'$VAR'(2),'$VAR'(0)), h('$VAR'(1),'$VAR'(0),'$VAR'(0)), h('$VAR'(2),'$VAR'(1),'$VAR'(2)), h('$VAR'(3),'$VAR'(3),'$VAR'(3))],
	Atoms2 = [f('$VAR'(6)), f('$VAR'(7)), g('$VAR'(4),'$VAR'(5)), g('$VAR'(6),'$VAR'(7)), g('$VAR'(7),'$VAR'(5)), g('$VAR'(7),'$VAR'(7)), i('$VAR'(7),'$VAR'(7)), h('$VAR'(4),'$VAR'(4),'$VAR'(4)), h('$VAR'(4),'$VAR'(6),'$VAR'(4)), h('$VAR'(5),'$VAR'(4),'$VAR'(4)), h('$VAR'(6),'$VAR'(5),'$VAR'(7)), h('$VAR'(6),'$VAR'(7),'$VAR'(6)), h('$VAR'(6),'$VAR'(7),'$VAR'(7)), h('$VAR'(7),'$VAR'(6),'$VAR'(4))],
	format('Atomes 1'),
	first_line_csv_matrix(Atoms2),
	csv_matrix(Atoms1, Atoms2, Sigmas),
	sigmas_openings(Sigmas).
	
sigmas_openings(Sigmas):- 
	sigmas_openings(Sigmas, Sigmas). 
sigmas_openings([], _). 
sigmas_openings([A-Sigma|Sigmas], AllSigmas):-
	format('~n ~nSigmas openings for ~w ~n ---------------------~n', [A]), 
	member(A2-Sigma2, AllSigmas), 
	A2 \= A,
	compatible(Sigma, Sigma2),
	format('~w~n', [A2]),
	fail. 
sigmas_openings([_|Sigmas], AllSigmas):-
	sigmas_openings(Sigmas, AllSigmas). 

first_line_csv_matrix([]):- !, format('~n').
first_line_csv_matrix([A|Atoms]):-
	format(';~w', [A]), 
	first_line_csv_matrix(Atoms). 
	 
csv_matrix(_, [], []):-!.
csv_matrix([], _, []):-!.
csv_matrix([A|Atoms1], Atoms2, [A-Sigma|Sigmas]):-
	format('~w', [A]),
	line_csv_matrix(A, Atoms2, Sigma1),
	sort(Sigma1, Sigma), 
	format(';~w ~n', [Sigma]),
	csv_matrix(Atoms1, Atoms2, Sigmas).
	
line_csv_matrix(_, [], []):- !.
line_csv_matrix(A, [A2|Atoms], [Sigma|SigmaOut]):-   
 	renaming_apart(A, A2, Sigma), 
 	!,
 	variable_to_numeric_mapping(Rho, Sigma),
 	format(';~w', [Rho]),
 	line_csv_matrix(A, Atoms, SigmaOut). 
line_csv_matrix(A, [A2|Atoms], SigmaOut):- 
	format(';[]'), 
	line_csv_matrix(A, Atoms, SigmaOut).

test_gen:-
	%Atoms1 = [f('$VAR'(2)), g('$VAR'(1),'$VAR'(0)), h('$VAR'(0),'$VAR'(0),'$VAR'(4)), h('$VAR'(2),'$VAR'(3),'$VAR'(1)), h('$VAR'(4),'$VAR'(0),'$VAR'(2))],
	%Atoms2 = [g('$VAR'(10),'$VAR'(11)), g('$VAR'(12),'$VAR'(13)), g('$VAR'(14),'$VAR'(14)), i('$VAR'(14),'$VAR'(15)), h('$VAR'(14),'$VAR'(12),'$VAR'(11)), h('$VAR'(11),'$VAR'(16),'$VAR'(12))], 
	
	Atoms1 = [f('$VAR'(0)), f('$VAR'(1)), f('$VAR'(3)), g('$VAR'(0),'$VAR'(2)), g('$VAR'(1),'$VAR'(0)), g('$VAR'(2),'$VAR'(3)), g('$VAR'(3),'$VAR'(1)), g('$VAR'(3),'$VAR'(2)), i('$VAR'(0),'$VAR'(3)), i('$VAR'(1),'$VAR'(1)), h('$VAR'(0),'$VAR'(2),'$VAR'(0)), h('$VAR'(1),'$VAR'(0),'$VAR'(0)), h('$VAR'(2),'$VAR'(1),'$VAR'(2)), h('$VAR'(3),'$VAR'(3),'$VAR'(3))],
	Atoms2 = [f('$VAR'(6)), f('$VAR'(7)), g('$VAR'(4),'$VAR'(5)), g('$VAR'(6),'$VAR'(7)), g('$VAR'(7),'$VAR'(5)), g('$VAR'(7),'$VAR'(7)), i('$VAR'(7),'$VAR'(7)), h('$VAR'(4),'$VAR'(4),'$VAR'(4)), h('$VAR'(4),'$VAR'(6),'$VAR'(4)), h('$VAR'(5),'$VAR'(4),'$VAR'(4)), h('$VAR'(6),'$VAR'(5),'$VAR'(7)), h('$VAR'(6),'$VAR'(7),'$VAR'(6)), h('$VAR'(6),'$VAR'(7),'$VAR'(7)), h('$VAR'(7),'$VAR'(6),'$VAR'(4))],
	
	build_matrices(Atoms1, Atoms2, Matrix, Atoms2, 0, 0), 
	format('~nAtomes de la clause 1 : '),  
	pprint:print_list(Atoms1),
	format('~nAtomes de la clause 2 : '), 
	pprint:print_list(Atoms2),
	format('~nMatrice : ~w', [Matrix]),
	
	generalize_poly(10, Atoms1, Atoms2, Matrix, Sol), 
	
	mcg(Matrix, Mcg), 
	get_mappings(Mcg, MMCG),
	variable_to_numeric_mapping(MMCG, MMCGNUM),
	gen(MMCGNUM, Atoms1, Atoms2, MAXGEN),
	format('~nMCG : ~w avec renaming ~w', [MAXGEN, MMCG]).  
 
generalize_poly(K, Atoms1, Atoms2, _, Solution) :-
	generalize_poly(K, Atoms1, Atoms2,  [], [], [], Solution, Rho),
	variable_to_numeric_mapping(Rho1, Rho), 
	format('~nGénéralisation :  ~w avec renaming ~w', [Solution, Rho1]).
 
generalize_poly(K, Atoms1, Atoms2, CurrentGen1, CurrentRho, CurrentGen2, Solution, Rho) :- 
	gp(K, Atoms1, Atoms2, CurrentGen1, CurrentRho, CurrentGen2, Solution, Rho).
	
gp(K, Atoms1, Atoms2, CurrentGen1, CurrentRho, CurrentGen2, Solution, Rho) :-
	format('~n CurrentGen1: ~w', [CurrentGen1]),
	length(CurrentGen2, N),
	remove_all(Atoms1, CurrentGen1, NAtoms1),
	format('~n NAtoms1: ~w', [NAtoms1]),
	remove_all(Atoms2, CurrentGen2, NAtoms2),
	build_matrices(NAtoms1, NAtoms2, Matrix, NAtoms2, 0, 0),
	length(Matrix, L),
	K1 is min(K, L), 
	setof(A, take_up_to(K1, NAtoms1, Matrix, A), A1s),
	!,
	format('~n A1s: ~w', [A1s]),
	member(A1, A1s),
	format('~n A1: ~w', [A1]),
	enforce_atoms(CurrentGen1, [], Atoms2, [], NewCurrentRho), 
	enforce_atoms(A1, CurrentGen1, Atoms2, NewCurrentRho, NewRho),
	% enforce_atoms([g('$VAR'(1))], [f('$VAR'(2))], [g('$VAR'(3)), f('$VAR'(4))], [2-4], Rho).
	format('~n NewRho: ~w', [NewRho]),
	gen(NewRho, Atoms1, Atoms2, NewGen1),
	apply_subst(NewGen1, NewRho, NewGen2),
	format('~n NewGen1: ~w', [NewGen1]), 
	format('~n NewGen2: ~w', [NewGen2]), 
	length(NewGen1, N1),
	N1 > N, 
	!,
	generalize_poly(K, Atoms1, Atoms2, NewGen1, NewRho, NewGen2, Solution, Rho). 
generalize_poly(_, _, _, CurrentGen1, CurrentRho, _, CurrentGen1, CurrentRho). 
	
take_up_to(N, List, Matrix, OutList):- 
	take_up_to(1, N, List, Matrix, OutList)
	.
take_up_to(N, NMax, _, _, _):- 
	 N > NMax, !, false.
take_up_to(N, NMax, Atoms, Matrix, Out):-
	N1 is N + 1, 
	take_up_to(N1, NMax, Atoms, Matrix, Out).
take_up_to(N, _, Atoms, Matrix, Out):-
	 fetch_n_best_scores(N, Matrix, MatrixOut),
	 ensure_injective(MatrixOut, IMatrixOut), 
	 extract_corresponding_atoms(Atoms, IMatrixOut, Out). 
	
ensure_injective([], []).
ensure_injective([Symb/N/M/Mapping|Matrix], [Symb/N/M/Mapping|MatrixOut]):-
	get_int_mappings(Matrix, IMappings), 
	renaming_with_vars_names(IMapping, Mapping),
	compatible(IMapping, IMappings),  
	not(member(Symb/N/_/_, Matrix)), 
	not(member(Symb/_/M/_, Matrix)), 
	!,
	ensure_injective(Matrix, MatrixOut).
ensure_injective([_|Matrix], MatrixOut):- 
	ensure_injective(Matrix, MatrixOut). 
	
fetch_n_best_scores(N, Matrix, MatrixOut):- 
	compute_scores(Matrix, ScoresMatrix), 
	!,
	zip(Matrix, ScoresMatrix, ZippedMatrix), 
	get_n_highest(N, ZippedMatrix, MatrixOut). 
	
get_n_highest(N, Matrix, Out):-
	sort_scores(Matrix, MatrixSorted),  
	unzip(MatrixSorted, NMatrixSorted),  
	take(N, NMatrixSorted, Out). 

take(N, _, Xs) :- N =< 0, !, N =:= 0, Xs = []. 
take(_, [], []).
take(N, [X|Xs], [X|Ys]) :- M is N-1, take(M, Xs, Ys). 
 
sort_scores(Matrix, MatrixSorted):-  
	q_sort(Matrix,[],MatrixSorted).

q_sort([],Acc,Acc).
q_sort([(H-Score)|T],Acc,Sorted):-
    pivoting(Score,T,L1,L2),
    q_sort(L1,Acc,Sorted1),
    q_sort(L2,[(H-Score)|Sorted1],Sorted).
	
pivoting(_,[],[],[]).  
pivoting(Score,[(M1-Score1)|T],[(M1-Score1)|L],G):-Score1 =< Score,pivoting(Score,T,L,G).
pivoting(Score,[(M1-Score1)|T],L,[(M1-Score1)|G]):-Score1 > Score,pivoting(Score,T,L,G).
 
compute_scores(Matrix, ScoresMatrix) :- 
	compute_scores(Matrix, Matrix, ScoresMatrix).  

compute_scores([], _, []).  
compute_scores([M|Matrix], AllMatrix, [Score|ScoresMatrix]):-
	matrix_score(M, AllMatrix, Score), 
	compute_scores(Matrix, AllMatrix, ScoresMatrix). 

matrix_score(M, AllMatrix, 1). %todo

extract_corresponding_atoms(_, [], []). 
extract_corresponding_atoms(Atoms, [_/N/_/_|Matrix], [O|Out]):-
	nth0(N, Atoms, O),
	!,
	extract_corresponding_atoms(Atoms, Matrix, Out).

take_random(N, List, OutList):- 
	all_members(OutList, List), 
	length(List, N). 
	
enforce_atoms([], _, _, CurrentRho, CurrentRho). 
enforce_atoms([A|TomsToEnforce], Atoms, AtomsFromGoal2, CurrentRho, EnforcingRho):- 
	member(A2, AtomsFromGoal2), 
	renaming_apart(A, A2, Sigma), 
	enforce_renaming(CurrentRho, Sigma, EnforcingRho1),  
	gen(EnforcingRho1, Atoms, AtomsFromGoal2, Gen),
	enforce_atoms(TomsToEnforce, Gen, AtomsFromGoal2, EnforcingRho1, EnforcingRho). 
	
enforce_renaming(Sigma, Rho, NewSigma):-  
	take_only_compatible(Sigma, Rho, NewSigma1),
	append(NewSigma1, Rho, NewSigma2), 
	sort(NewSigma2, NewSigma),
	!.
	
take_only_compatible([], _, []).  
take_only_compatible([S|Sigma], Rho, [S|OnlyCompatible]):-
	compatible([S], Rho),
	!,
	take_only_compatible(Sigma, [S|Rho], OnlyCompatible).      
take_only_compatible([_|Sigma], Rho, OnlyCompatible):-
	take_only_compatible(Sigma, Rho, OnlyCompatible). 
	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
anti_unification_coefficient(Matrix, Coeff):- 
	anti_unification_coefficients(Matrix, Coeffs), 
	agregate_coeffs(Coeffs, Coeff). 

anti_unification_coefficients(_, []). 
anti_unification_coefficients(Matrix, [Coefficient|Coeffs]):- 
	get_predicate_matrix(Matrix, PredicateMatrix, NewMatrix), 
	compute_anti_unification_coefficient(PredicateMatrix, Coefficient),
	anti_unification_coefficients(NewMatrix, Coeffs).
	
compute_anti_unification_coefficient(PredicateMatrix, Coefficient):- 
	true. % todo  	

agregate_coeffs(Coeffs, Coeff) :- 
	true. % todo
	
get_predicate_matrix([], [], []). 
get_predicate_matrix(Matrix, PredicateMatrix, NewMatrix):-
	Matrix = [Symb/_/_/_|_], 
 	extract_all_matrix(Symb, Matrix, PredicateMatrix, NewMatrix).
 	
extract_all_matrix(_, [], [], []).
extract_all_matrix(Symb, [Symb/N/M/Mapping|Matx], [Symb/N/M/Mapping|PredicateMatrix], NewMatrix):-
	extract_all_matrix(Symb, Matx, PredicateMatrix, NewMatrix). 
extract_all_matrix(Symb, [Symb2/N/M/Mapping|Matx], PredicateMatrix, [Symb2/N/M/Mapping|NewMatrix]):- 
	Symb2 \= Symb, 
	extract_all_matrix(Symb, Matx, PredicateMatrix, NewMatrix). 
 	
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
generalize_variables(K, Atoms1, Atoms2, Solution) :- 
	generalize_variables(K, Atoms1, Atoms2, [], [], Solution, Rho),
	%format('~n*-*-*-*-*-*Résultat (polynomial)*-*-*-*-*-*'), 
	variable_to_numeric_mapping(Rho1, Rho), 
	format('~nGénéralisation : ~w avec renaming ~w', [Solution, Rho1]).
	
generalize_variables(K, Atoms1, Atoms2, Phi, S, Solution, RenamingSolution) :-
	gen(Phi, Atoms1, Atoms2, OldGen), 
		%renaming_with_vars_names(Phi, VPhi),
		%format('~nOldGen: ~w with Phi: ~w', [OldGen, VPhi]),
	length(OldGen, N),
		%format('~nN: ~w', [N]), 
	remove_all(Atoms1, S, NAtoms1),
		%format('~nNAtoms1: ~w', [NAtoms1]),
	apply_subst(S, Phi, S2),    
		%format('~nS2: ~w:', [S2]),
	remove_all(Atoms2, S2, NAtoms2),
		%format('~nNAtoms2: ~w', [NAtoms2]), 
	select(A, NAtoms1, _), 
	select(A2, NAtoms2, _),  
		%format('~nA: ~w, A2:~w', [A, A2]),
	renaming_apart(A, A2, Sigma1), 
		%format('~nSigma: ~w', [Sigma1]),   
	atoms_vars(Atoms1, Vars1),   
		%format('~nVars1: ~w', [Vars1]),	
	atoms_vars(Atoms2, Vars2),
		%format('~nVars2: ~w', [Vars2]),	 
	atom_vars(A, V1), 
		%format('~nV1: ~w', [V1]),	
	atom_vars(A2, V2), 
		%format('~nV1: ~w', [V1]), 
	remove_all(Vars1, V1, Varss1), 
		%format('~nVarss1: ~w', [Varss1]), 
	remove_all(Vars2, V2, Varss2), 
		%format('~nVarss2: ~w', [Varss2]), 
	renamings_from(Varss1, Varss2, Rests),
	member(Rest, Rests), 
	append(Sigma1, Rest, Sigma),  
	%compatible(Sigma, Phi2),
	%	format(' sont compatibles !! '),
	k_swap_poly(K, Phi, Sigma),  
		%format('~nPhi2: ~w', [Phi2]),
	k_extension(Phi, Sigma, Phi3), 
		%renaming_with_vars_names(Phi3, VPhi3),
		%format('~n K extension : ~w', [VPhi3]),
	union(Sigma, [], PhiSigma2),  
		%renaming_with_vars_names(Phi3, VPhiSigma2),
		%format('~nPhiSigma2: ~w', [VPhiSigma2]), 
	gen(PhiSigma2, Atoms1, Atoms2, NewGen2),
		%format('~n NewGen2: ~w', [NewGen2]),
	length(NewGen2, L2), 
	union(Sigma, Phi3, PhiSigma3), 
		%renaming_with_vars_names(PhiSigma3, VPhiSigma3),
		%format('~nPhiSigma3: ~w',  [VPhiSigma3]),
	gen(PhiSigma3, Atoms1, Atoms2, NewGen3),
		%format('~nNewGen3: ~w', [NewGen3]), 
	length(NewGen3, L3),
		%format('~nL3: ~w', [L3]),
	choose_biggest_cardinality(L2, L3, [PhiSigma2, NewGen2], [PhiSigma3, NewGen3], [PhiSigma, NewGen], LMax), 
		%format('~nPhiSigma: ~w, Gen: ~w', [PhiSigma3, NewGen]),
	N < LMax,   
	!,
	generalize_poly(K, Atoms1, Atoms2, PhiSigma, NewGen, Solution, RenamingSolution).

generalize_variables(_, _, _, Phi, S, S, PhiLisible):-
	renaming_with_vars_names(Phi, PhiLisible).
	
remove_all([], _, []). 
remove_all([X|Xs], RemoveList, Result):- 
	 member(X, RemoveList), 
	 !, 
	 remove_all(Xs, RemoveList, Result). 
remove_all([X|Xs], RemoveList, [X|Result]):-
	not(member(X, RemoveList)),
	!, 
	remove_all(Xs, RemoveList, Result).  
	
choose_biggest_cardinality(C1, C2, _, List2, List2, C2):-  
	C2 > C1. 
choose_biggest_cardinality(C1, C2, List1, _, List1, C1):- 
	C2 =< C1. 
	
k_extension([], Phi2, Phi2).  
k_extension([X|Phi], Phi2, [X|Phi3]):-
	compatible([X], Phi2),
	!,
	k_extension(Phi, Phi2, Phi3).  
k_extension([_|Phi], Phi2, Phi3):- 
	k_extension(Phi, Phi2, Phi3). 
	
renaming_with_vars_names([], []).	
renaming_with_vars_names([I-J|Rho], ['$VAR'(I)-'$VAR'(J)|RhoL]):-
	renaming_with_vars_names(Rho, RhoL). 

gen(Phi, _, _, []):- 
	is_not_injective(Phi),
	!. 
gen(Phi, Atoms1, Atoms2, S2):-
	apply_subst(Atoms1, Phi, NAtoms1), 
	common_list(NAtoms1, Atoms2, S),
	inverse_renaming(Phi, Phi2), 
	apply_subst(S, Phi2, S2),
	!.  
	
inverse_renaming([], []). 
inverse_renaming([A-B|Rho], [B-A|RhoI]):-
	inverse_renaming(Rho, RhoI). 

union(Rho1, Rho2, Rho):-
	append(Rho1, Rho2, Rho3), 
	sort(Rho3, Rho). 
	
compatible(Rho1, Rho2):- 
	not(not_compatible(Rho1, Rho2)). 
	
not_compatible([I-J|_], Rho2):-
	member(I-J2, Rho2), 
	J2 =\= J.  
not_compatible([I-J|_], Rho2):-
	member(I2-J, Rho2), 
	I2 =\= I. 
not_compatible([_|Rho1], Rho2):-
	not_compatible(Rho1, Rho2). 
	
renamings_from(Vars1, Vars2, RhoOuts):-
	setof(X, renaming_from(Vars1, Vars2, X), RhoOuts). 
	
renaming_from(Vars1, Vars2, RhoOut):-
	all([Vars1, Vars2], All),
	transform_to_rho(All, Rho), 
	!,
	renaming_from_from(Rho, RhoOut). 
	
renaming_from_from([], []). 
renaming_from_from([_-_|Rho], RhoOut):- 
	renaming_from_from(Rho, RhoOut).
renaming_from_from([A-B|Rho], [A-B|RhoOut]):-
	remove_appearances(A, B, Rho, NRho), 
	renaming_from_from(NRho, RhoOut).
	
remove_appearances(_, _, [], []). 
remove_appearances(A, B, [A-_|Rho], NRho):- 
	 !, 
	 remove_appearances(A, B, Rho, NRho). 
remove_appearances(A, B, [_-B|Rho], NRho):-
 	!, 
 	remove_appearances(A, B, Rho, NRho). 
remove_appearances(A, B, [X-Y|Rho], [X-Y|NRho]):-
	remove_appearances(A, B, Rho, NRho). 

transform_to_rho([], []). 
transform_to_rho([['$VAR'(A),'$VAR'(B)]|Lists], [A-B|Rho]):-
	transform_to_rho(Lists, Rho). 
	
try([],[]).
try([L|Ls],[M|Ms]):-
    member(M,L),
    try(Ls,Ms).

all(L,All) :- findall(M, try(L,M), All).  
	
atoms_vars([], []).
atoms_vars([A|Toms], AtomsVars):-
	atom_vars(A, AtomVars),
	atoms_vars(Toms, AVS), 
	append(AtomVars, AVS, AtomsVars1), 
	sort(AtomsVars1, AtomsVars). 
	
atom_vars(Atom, AtomVars):- 
	Atom =.. [_|Vars],
	sort(Vars, AtomVars).
	
k_swap_poly(K, Phi, Phi2):-
	sort(Phi, Phi1), 
	length(Phi1, L1), 
	common_list(Phi1, Phi2, CommonPhi), 
	sort(CommonPhi,CP), 
	length(CP, LC), 
	K1 is L1 - LC, 
	K1 =< K. 
	
is_not_injective(Rho):- 
	member(K-J, Rho),
	member(I-J, Rho),
	K =\= I. 
is_not_injective(Rho):- 
	member(I-J, Rho), 
	member(I-K, Rho),
	K =\= J. 
	
common_list([], _, []). 
common_list([X|List], List2, [X|CommonList]):- 
	select(X, List2, NList2),  
	common_list(List, NList2, CommonList). 
common_list([X|List], List2, CommonList):-
	not(member(X, List2)),
	common_list(List, List2, CommonList). 
	
renaming_apart(Atom1, Atom2, SigmaOut) :-
	Atom1 =.. [F|Args1], 
	Atom2 =.. [F|Args2],
	renaming_apart_args(Args1, Args2, Sigma),
	compatible(Sigma, Sigma),
	sort(Sigma, SigmaOut). 
	
renaming_apart_args([], [], []). 
renaming_apart_args(['$VAR'(I)|Args1], ['$VAR'(J)|Args2], [I-J|Sigma]):-
	I =\= J, 
	renaming_apart_args(Args1, Args2, Sigma).
renaming_apart_args(['$VAR'(I)|Args1], ['$VAR'(I)|Args2], Sigma):-
	renaming_apart_args(Args1, Args2, Sigma). 
  
apply_subst(Atoms, [], Atoms). 
apply_subst([], _, []). 
apply_subst([A|Toms], Phi, [NA|NAtoms]):-
	apply_subst_atom(A, Phi, NA), 
	apply_subst(Toms, Phi, NAtoms). 
	
apply_subst_atom(Atom, Phi, NAtom):-
	Atom =.. [F|Args],
	apply_subst_args(Args, Phi, NArgs), 
	NAtom =.. [F|NArgs]. % todo functors

apply_subst_args([], _, []). 
apply_subst_args(['$VAR'(I)|Args], Phi, ['$VAR'(I)|NArgs]):-
	not(member(I-_, Phi)),  
	apply_subst_args(Args, Phi, NArgs).  
apply_subst_args(['$VAR'(I)|Args], Phi, ['$VAR'(J)|NArgs]):-
	member(I-J, Phi), 
	apply_subst_args(Args, Phi, NArgs).  

generalize_files(K):- 
	prepare('test.clp', 'test2.clp', [cl(_, Atoms1)], [cl(_, Atoms2)]),
	generalize(K, Atoms1, Atoms2, _).
	
mcg(Matrix, MCG):- 
	msg(Matrix, Output), 
	longest(Output, MCG). 
	
longest([L], L) :-
   !.
longest([H|T], H) :- 
   length(H, N),
   longest(T, X),
   length(X, M),
   N > M,
   !.
longest([_|T], X) :- 
   longest(T, X),
   !.
   	
msg([], []). 
msg(Matrix, Output) :-
	setof(O, msg(Matrix, O, []), Output1),
	sort(Output1, Output). 	
	
msg([], O, O):-!. 
msg([M|Matrix], Output, Prior) :- 
	append([M], Prior, NPrior), 
	no_collisions(NPrior), 
	msg(Matrix, Output, NPrior).  
msg([_|Matrix], Output, Prior) :- 
	msg(Matrix, Output, Prior).  
	
generalize(K, Matrix, Output) :- 
	assert(max_encountered_length(0)),
	update_max_length(0), 
	%format('Atomes de la clause 1 : '), 
	%pprint:print_list(Atoms1),
	%format('~nAtomes de la clause 2 : '), 
	%pprint:print_list(Atoms2), 
	
	injective_generalization(Matrix, Output1), 
	not(k_swap_unstable_naive(K, Matrix, Output1)), 
	
	sort(Output1, Output), 
	
	format('~n*-*-*-*-*-*Résultat (exponentiel)*-*-*-*-*-*'), 
	format('~n~w', [Output]).
	
injective_generalization(Matrix, Output):-
	all_members(Output, Matrix), 
	length(Output, Length), 
	max_encountered_length(MinLength), 
	Length >= MinLength, 
	no_collisions(Output),
	update_max_length(Length). 
 
update_max_length(X):- 
	max_encountered_length(L), 
	X > L,
	!,
	retractall(max_encountered_length(_)),
	assert(max_encountered_length(X)). 
update_max_length(X):- 
	max_encountered_length(L), 
	X =< L,
	!. 
update_max_length(X):-
	assert(max_encountered_length(X)). 

all_members([], _).
all_members([X|Xs], List) :-
	select(X, List, List2), 
	no_collisions(Xs),
	all_members(Xs, List2). 
	 
k_swap_unstable_naive(K, Matrix, Gen1):-  
	injective_generalization(Matrix, Gen2),
	has_more_atoms(Gen2, Gen1),
	k_swap(K, Gen1, Gen2),  
	format('~n Gen2 : ~w is ~w-swap from Gen1 : ~w', [Gen2, K, Gen1]).
	 
k_swap(K, Gen1, Gen2):-
	get_mappings(Gen1, M1), 
	get_mappings(Gen2, M2), 
	length(M1, L1), 
	length(M2, L2),
	L2 =< K, 
	common_list(M1, M2, CM), 
	length(CM, LC), 
	L3 is L1 - LC,
	L3 =< K.
	
get_mappings([], []).
get_mappings([_/_/_/Mapping|List], SM) :-
	get_mappings(List, M2), 
	append(Mapping, M2, Mappings), 
	sort(Mappings, SM).
	
get_int_mappings(Matrix, Mappings):- 
	get_mappings(Matrix, Mappings1), 
	renaming_with_vars_names(Mappings, Mappings1). 

	
% G1 is strictly more specific than G2
is_strictly_more_specific(Gen1, Gen2):-
	has_same_atoms(Gen1, Gen2),
	has_more_atoms(Gen1, Gen2). 
	
has_same_atoms(_, []).
has_same_atoms(Gen1, [Symb/_/_/_|List]) :- 
	select(Symb/_/_/_, Gen1, NGen1),
	has_same_atoms(NGen1, List).
	
has_more_atoms(Gen1, Gen2) :-
	length(Gen1, L1), 
	length(Gen2, L2),
	L1 > L2.

no_collisions([]). 
no_collisions([_/N/M/Mapping|List]):- 
	not_generalized_n_m(N, M, List),
	injectivity_ok(Mapping, List), 
	no_collisions(List). 
	
not_generalized_n_m(_,_, []). 
not_generalized_n_m(N, M, [_/N1/M1/_|List]):- 
	N1 =\= N,  
	M1 =\= M, 
	not_generalized_n_m(N, M, List). 

injectivity_ok([], _). 
injectivity_ok([A-B|Mapping], List):-
	injectivity_ok_a_b(A, B, List), 
	injectivity_ok_a_b_mapping(A,B,Mapping), 
	injectivity_ok(Mapping, List).
	
injectivity_ok_a_b(_, _, []). 
injectivity_ok_a_b(A, B, [_/_/_/Mapping|List]):- 
	injectivity_ok_a_b_mapping(A, B, Mapping), 
	injectivity_ok_a_b(A, B, List).  

injectivity_ok_a_b_mapping(_, _, []). 
injectivity_ok_a_b_mapping('$VAR'(I), '$VAR'(J), ['$VAR'(I)-'$VAR'(J)|Mapping]) :- 
	!,
	injectivity_ok_a_b_mapping('$VAR'(I), '$VAR'(J), Mapping). 
injectivity_ok_a_b_mapping('$VAR'(I), '$VAR'(J), ['$VAR'(I1)-'$VAR'(J1)|Mapping]) :- 
	I =\= I1, 
	J =\= J1, 
	injectivity_ok_a_b_mapping('$VAR'(I), '$VAR'(J), Mapping). 

order_atoms([], []).  
order_atoms(Atoms, NAtoms):- 
	sort(Atoms, NAtoms).

build_matrices([], _, [], _, _, _).
build_matrices([_|Atoms1], [], MatrixSimilarities, AllAtoms2, N, _):-
	N1 is N + 1,
	build_matrices(Atoms1, AllAtoms2, MatrixSimilarities, AllAtoms2, N1, 0). 
build_matrices([A1|Atoms1], [A2|Atoms2], NMatrixSimilarities, AllAtoms2, N, M):-
		A1 =..[Symb|_],
		A2 =..[Symb|_],
		map_variables(A1, A2, Mapping1),
		sort(Mapping1, Mapping),
		consistent_mapping(Mapping, []),
		!,
		M1 is M + 1,
		build_matrices([A1|Atoms1], Atoms2, MatrixSimilarities, AllAtoms2, N, M1),
		append([Symb/N/M/Mapping], MatrixSimilarities, NMatrixSimilarities).
build_matrices(Atoms1, [_|Atoms2], MatrixSimilarities, AllAtoms2, N, M):-
		M1 is M + 1, 
		build_matrices(Atoms1, Atoms2, MatrixSimilarities, AllAtoms2, N, M1).
	
consistent_mapping([], _). 
consistent_mapping([A-B|Mapping], ConstructedMapping):-
	not(non_injective_appearance(A-B, ConstructedMapping)),
	append(ConstructedMapping, [A-B], NConstructedMapping),
	consistent_mapping(Mapping, NConstructedMapping). 
	
non_injective_appearance('$VAR'(I)-'$VAR'(J), Mapping):- 
	member('$VAR'(K)-'$VAR'(J), Mapping),
	K =\= I. 
non_injective_appearance('$VAR'(I)-'$VAR'(J), Mapping):- 
	member('$VAR'(I)-'$VAR'(K), Mapping),
	K =\= J. 
	 
map_variables(A1, A2, Mapping):- 
	A1 =..[_|Args1],
	A2 =..[_|Args2],
	zip(Args1, Args2, Mapping). 
	
zip([], [], []).
zip([X|Xs], [Y|Ys], [X-Y|XYs]) :-
   zip(Xs, Ys, XYs).
   
unzip([], []). 
unzip([X-_|List], [X|Out]):-
	unzip(List, Out). 

mix_clauses([], []). 
mix_clauses([C|Cs], [NC|NCs]):- 
	mix_clause(C, NC), 
	mix_clauses(Cs, NCs).
	
mix_clause(cl(H, C, B), cl(H, Atoms)):- 
	append(C, B, Atoms).  
	